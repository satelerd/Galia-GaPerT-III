{"version":3,"sources":["components/card/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","title","note","theme","isinput","tweet","galia","button","button1","button2","className","xhr","XMLHttpRequest","open","console","log","responseType","send","App","useState","setTheme","galiaResponse","setGaliaResponse","gptResponse","setGptResponse","a","process","openai","OpenAI","preset","fullPromp","complete","engine","prompt","maxTokens","temperature","topP","presencePenalty","frequencyPenalty","bestOf","n","stream","stop","useEffect","undefined","data","cont","txt","choices","text","i","length","slice","posibleInput","html","placeholder","onChange","event","target","value","buttons","onClick","ApiCall","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAkCeA,MA9Bf,YAAsF,IAAvEC,EAAsE,EAAtEA,MAAOC,EAA+D,EAA/DA,KAAMC,EAAyD,EAAzDA,MAAcC,GAA2C,EAAlDC,MAAkD,EAA3CD,SAASE,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,QAEvE,OACI,qBAAKC,UAAU,OAAf,SACI,sBAAKA,UAAU,wBAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BT,IAC5B,oBAAIS,UAAU,YAAd,SAA2BR,IAG3B,sBAAKQ,UAAU,WAAf,UACI,6BAAKP,IACL,6BAAKG,OAGT,sBAAKI,UAAU,WAAf,UACKN,EACAG,EACAC,EACAC,W,iBChBjBE,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAO,2EAChBC,QAAQC,IAAI,UAAWJ,GACvBA,EAAIK,aAAe,OACnBL,EAAIM,OA0GWC,MAvGf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOhB,EAAP,KAAciB,EAAd,KACA,EAA0CD,qBAA1C,mBAAOE,EAAP,KAAsBC,EAAtB,KACA,EAAsCH,mBAAS,IAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KAHa,4CAKb,kCAAAC,EAAA,4DACuBC,sDACfC,EAAS,IAAIC,IADEF,uDAEfG,EAAS,ygCACD,YACVC,EAAY,GAGdA,EADW,KAAV3B,EACW0B,EAEAA,EAAS1B,EANT,YASdmB,EAAiB,SAbnB,KAcEE,EAdF,UAeUG,EAAOI,SAAS,CACpBC,OAAQ,UACRC,OAAQH,EACRI,UAAW,GACXC,YAAa,GACbC,KAAM,EACNC,gBAAiB,EACjBC,iBAAkB,EAClBC,OAAQ,EACRC,EAAG,EACHC,QAAQ,EACRC,KAAM,CAAC,MAAO,aA1BpB,oCA8BM/B,EAAM,IAAIC,gBACVC,KAAK,MAAO,gFAChBC,QAAQC,IAAI,UAAWJ,GACvBA,EAAIK,aAAe,OACnBL,EAAIM,OAlCN,6CALa,sBA2Cb0B,qBAAU,WACR,GAAmB,KAAhBpB,QAA2CqB,IAArBrB,EAAYsB,KACnCvB,EAAiB,QACb,CAIJ,IAFA,IAAIwB,EAAO,EACPC,EAAMxB,EAAYsB,KAAKG,QAAQ,GAAGC,KAC9BC,EAAE,EAAGA,EAAEH,EAAII,QACF,MAAXJ,EAAIG,GADiBA,IAIzBJ,IAEY,KAAV3C,GACFiB,EAAS,SAAW2B,EAAIK,MAAM,EAAGN,EAAK,IACtChC,QAAQC,IAAIgC,GACZA,EAAMA,EAAIK,MAAMN,EAAK,EAAEC,EAAII,OAAO,GAClCrC,QAAQC,IAAIgC,IAEZA,EAAMA,EAAIK,MAAM,EAAEL,EAAII,QAKxB7B,EAAiByB,GAGnBjC,QAAQC,QACP,CAACQ,IAGJ,IAEI8B,EAAe,CAAC,CAACC,KAAM,uBAAOC,YAAY,mBAAmBC,SAAW,SAAAC,GAAK,OAAIrC,EAAS,SAAWqC,EAAMC,OAAOC,WAAoB,CAACL,KAAM,0BAC7IM,EAAU,CAACrD,OAAQ,wBAAQsD,QAAS,YA7E3B,mCA6EkCC,IAAxB,2BAA4DtD,QAAS,8CAA2BC,QAAS,uDAIhI,OACE,sBAAKC,UAAU,MAAf,UACE,iCACE,iDAGF,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,QAAf,SACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,CAAMT,MAhBJ,8BAgBkBC,KAfnB,sDAe+BE,QAASiD,EAAa,GAAGC,KAAM/C,OAAQqD,EAAQrD,aAInF,qBAAKG,UAAU,WAAf,SAEE,cAAC,EAAD,CAAMT,MAAO,iBAAkBE,MAAOA,EAAOE,MAAO,SAAUD,QAASiD,EAAa,GAAGC,KAAMhD,MAAOe,EAAeb,QAASoD,EAAQpD,QAASC,QAASmD,EAAQnD,mBCjGzJsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5328325e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.css'\r\n\r\n\r\nfunction Card({title, note, theme, tweet, isinput, galia, button, button1, button2}) {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-body text-center\">\r\n                <h4 className=\"card-title\">{title}</h4>\r\n                <h5 className=\"card-text\">{note}</h5>\r\n                \r\n\r\n                <div className=\"card-res\">\r\n                    <h5>{theme}</h5>\r\n                    <h5>{galia}</h5>\r\n                </div>\r\n\r\n                <div className=\"card-bot\">\r\n                    {isinput}\r\n                    {button}\r\n                    {button1}\r\n                    {button2}\r\n                </div>\r\n\r\n                {/* <div className=\"card-buttons\">\r\n                    {button1}\r\n                    {button2}\r\n                </div> */}\r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default Card\r\n","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Card from \"./components/card/Card\"\nimport OpenAI from 'openai-api';\n\n// agruega 1 al contador de visitas\nvar xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"https://api.countapi.xyz/hit/satelerd.github.ioGalia-GaPerT-III/visitas\");\nconsole.log(\"visitas\", xhr)\nxhr.responseType = \"json\";\nxhr.send();\n\n\nfunction App() {\n  const [theme, setTheme] = useState(\"\");\n  const [galiaResponse, setGaliaResponse] = useState()\n  const [gptResponse, setGptResponse] = useState(\"\")\n\n  async function ApiCall() {\n    const  userHandler = process.env.REACT_APP_USER_HANDLER\n    const openai = new OpenAI(userHandler);\n    const preset = \"Galia es una filosofa reconocida a nivel mundial que busca la creatividad, la libre expresión y la buena música. Galia es bastante sarcástica, por lo que a veces responde de mala gana.\\nEste modelo generara un Tweet de Galia según un tema a elección.\\n\\nTema: El ocio. \\nTweet: Siento que a veces hago mucho por la gente y la humanidad. ¿Por qué no puedo estar un rato sin hacer nada?\\n###\\nTema: La música.\\nTweet: La música crea mas simpatía que el sexo.\\n###\\nTema: Paises sub desarrollados.\\nTweet: Los paises subdesarrollados deberian ser mas estrictos con la migracion.\\n###\\nTema: Los carros.\\nTweet: Me gusta mucho andar en bicicleta, pero estoy en contra de querer cambiar el mundo por ese termino.\\n###\\nTema: Pornografia.\\nTweet: Me gusta mucho mirar porno, pero siempre tengo que tener cuidado con la hora, para no dar una \\\"sorpresa\\\" a mi madre.\\n###\\nTema: La gente.\\nTweet: La gente es una raza aislada, que se siente superior y que no tiene en cuenta el mundo que la rodea.\\n###\\nTema:\"\n    const final = \".\\nTweet:\"\n    var fullPromp = \"\"\n\n    if(theme === \"\") {\n      fullPromp = preset\n    } else {\n      fullPromp = preset + theme + final\n    }\n\n    setGaliaResponse(\"CALMA\")\n    setGptResponse (\n      await openai.complete({\n        engine: 'davinci',\n        prompt: fullPromp,\n        maxTokens: 64,\n        temperature: 0.5,\n        topP: 1,\n        presencePenalty: 0,\n        frequencyPenalty: 0,\n        bestOf: 1,\n        n: 1,\n        stream: false,\n        stop: [\"###\", \"testing\"]\n      })\n    )\n    // agruega 1 al contador de generaciones\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"https://api.countapi.xyz/hit/satelerd.github.ioGalia-GaPerT-III/generaciones\");\n    console.log(\"visitas\", xhr)\n    xhr.responseType = \"json\";\n    xhr.send();\n    \n  } \n\n  useEffect(() => {\n    if(gptResponse === \"\" || gptResponse.data === undefined) {\n      setGaliaResponse(\"\")\n    } else{\n      // Limpieza de texto\n      var cont = 0\n      var txt = gptResponse.data.choices[0].text\n      for(let i=0; i<txt.length; i++) {\n        if (txt[i] === \":\") {\n          break\n        }\n        cont++\n      }\n      if (theme === \"\") {\n        setTheme(\"Tema: \" + txt.slice(0, cont-6))\n        console.log(txt)\n        txt = txt.slice(cont+2,txt.length-1)\n        console.log(txt)\n      } else {\n        txt = txt.slice(1,txt.length)\n      }\n      \n\n\n      setGaliaResponse(txt)\n      \n    }\n    console.log();\n  }, [gptResponse])\n\n\n  var title = \"Elige el tema para el tweet\"\n  var note = \"(Dejalo vacio para que Galia genere su propio tema)\"\n  var posibleInput = [{html: <input placeholder=\"Ej: La humanidad\" onChange={ event => setTheme(\"Tema: \" + event.target.value) }></input>}, {html: <div></div>}]\n  var buttons = {button: <button onClick={() => {ApiCall()}}>Generar Tweet</button>, button1: <button>Twittear</button>, button2: <button>Generar de nuevo</button>}\n\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Galia Tweet's</h1>\n      </header>\n\n      <div className=\"Body\">\n        <div className=\"pasos\">\n          <div className=\"paso1\">\n            <Card title={title} note={note} isinput={posibleInput[0].html} button={buttons.button}/>\n          </div>\n        </div>\n\n        <div className=\"tweetgen\">\n          {/* <ApiCall></ApiCall> */}\n          <Card title={\"Tweet generado\"} theme={theme} tweet={\"Tweet:\"} isinput={posibleInput[1].html} galia={galiaResponse} button1={buttons.button1} button2={buttons.button2}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}